#!/bin/bash
set -eo pipefail

# Log the start of the script
echo "Setting up environment variables..."

# Get application name and environment from existing env vars
APP_NAME=${EB_APP_NAME:-loan-applications-service}
ENV_NAME=${EB_ENVIRONMENT_NAME:-dev}

echo "Application: $APP_NAME, Environment: $ENV_NAME"

# Set up logging to files for debugging
LOG_DIR="/var/log/app-deploy"
mkdir -p "$LOG_DIR"
SETUP_LOG="$LOG_DIR/env_setup.log"

# Redirect all output to log file and console
exec > >(tee -a "$SETUP_LOG") 2>&1

echo "$(date -u) - Environment setup script started"
echo "Instance metadata:"
curl -s http://169.254.169.254/latest/meta-data/instance-id || echo "Failed to get instance metadata"
echo "AWS region: $(curl -s http://169.254.169.254/latest/meta-data/placement/region || echo "unknown")"

# Function to retrieve and set environment variables from SSM Parameter Store
fetch_and_set_param() {
  local param_name=$1
  local env_var_name=$2
  local required=${3:-false}

  echo "Fetching parameter: $param_name"

  # Check AWS CLI is working
  if ! command -v aws &> /dev/null; then
    echo "ERROR: AWS CLI is not installed or not in PATH"
    if [ "$required" = "true" ]; then
      exit 1
    fi
    return 1
  fi

  # Check IAM permissions by listing parameters (test access)
  echo "Testing SSM Parameter Store access..."
  if ! aws ssm describe-parameters --max-items 1 &> /dev/null; then
    echo "ERROR: No permission to access SSM Parameter Store. Check IAM role permissions."
    echo "IAM identity: $(aws sts get-caller-identity 2>/dev/null || echo "Unable to determine")"
    if [ "$required" = "true" ]; then
      exit 1
    fi
    return 1
  fi

  # Get the parameter value from SSM Parameter Store
  local param_value
  local aws_output
  aws_output=$(aws ssm get-parameter --name "$param_name" --with-decryption --query "Parameter.Value" --output text 2>&1)
  local exit_code=$?
  
  if [ $exit_code -eq 0 ] && [ -n "$aws_output" ]; then
    param_value="$aws_output"
    echo "Setting $env_var_name from SSM Parameter Store"
    export "$env_var_name=$param_value"
    # Also add to .env file for application to read
    echo "$env_var_name=$param_value" >> /var/app/staging/.env
    return 0
  else
    echo "WARNING: Parameter $param_name not found or error retrieving it"
    echo "AWS Error: $aws_output"
    if [ "$required" = "true" ]; then
      echo "ERROR: Required parameter $param_name could not be retrieved"
      exit 1
    fi
    return 1
  fi
}

# Create or clear the .env file
echo "# Environment variables - Generated by Elastic Beanstalk prebuild script" > /var/app/staging/.env

# Always ensure PORT and NODE_ENV are set correctly for Elastic Beanstalk
echo "PORT=8080" >> /var/app/staging/.env
echo "NODE_ENV=production" >> /var/app/staging/.env

# Fetch database connection string from SSM Parameter Store
fetch_and_set_param "/$APP_NAME/$ENV_NAME/database-url" "DATABASE_URL"

# Fetch API access token
fetch_and_set_param "/$APP_NAME/$ENV_NAME/api-access-token" "API_ACCESS_TOKEN"

# Setting permissions for the .env file
chmod 600 /var/app/staging/.env

echo "Environment setup completed"
