files:
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/01_set_env_vars.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      # Enable debugging
      set -x

      # Log file for debugging
      LOGFILE="/var/log/eb-env-vars.log"
      exec > >(tee -a $LOGFILE) 2>&1

      echo "Starting environment variable configuration at $(date)"

      # Get the environment name and application name
      EB_ENV=$(get-config environment -k EnvironmentName)
      APP_PREFIX=$(echo $EB_ENV | sed 's/-dev$\|-staging$\|-prod$//')
      ENV_TYPE=$(echo $EB_ENV | sed 's/^.*-\(dev\|staging\|prod\)$/\1/')

      echo "Detected environment: $ENV_TYPE, app prefix: $APP_PREFIX"

      # Get Node environment variables from EB configuration if available
      NODE_ENV=$(get-config environment -k NODE_ENV 2>/dev/null) || NODE_ENV=$ENV_TYPE

      # Try to get PORT and LOG_LEVEL from SSM Parameter Store first, fallback to EB config
      PORT_PARAM="/$APP_PREFIX/$ENV_TYPE/port"
      LOG_LEVEL_PARAM="/$APP_PREFIX/$ENV_TYPE/log-level"

      # Try to get PORT from SSM, fall back to EB config or default
      echo "Trying to get PORT from SSM parameter: $PORT_PARAM"
      PORT=$(aws ssm get-parameter --name "$PORT_PARAM" --query "Parameter.Value" --output text 2>/dev/null) || \
        PORT=$(get-config environment -k PORT 2>/dev/null) || \
        PORT=8080

      # Try to get LOG_LEVEL from SSM, fall back to EB config or default
      echo "Trying to get LOG_LEVEL from SSM parameter: $LOG_LEVEL_PARAM"
      LOG_LEVEL=$(aws ssm get-parameter --name "$LOG_LEVEL_PARAM" --query "Parameter.Value" --output text 2>/dev/null) || \
        LOG_LEVEL=$(get-config environment -k LOG_LEVEL 2>/dev/null) || \
        LOG_LEVEL=info

      echo "Using NODE_ENV=$NODE_ENV, PORT=$PORT, LOG_LEVEL=$LOG_LEVEL"

      # Get DATABASE_URL from SSM Parameter Store
      DB_URL_PARAM="/$APP_PREFIX/$ENV_TYPE/database-url"
      echo "Retrieving DATABASE_URL from SSM parameter: $DB_URL_PARAM"

      DATABASE_URL=$(aws ssm get-parameter --name "$DB_URL_PARAM" --with-decryption --query "Parameter.Value" --output text 2>>$LOGFILE)
      SSM_STATUS=$?

      if [ $SSM_STATUS -ne 0 ] || [ -z "$DATABASE_URL" ]; then
        echo "ERROR: Failed to retrieve DATABASE_URL from SSM parameter store ($SSM_STATUS)"
        echo "AWS CLI Output:"
        aws ssm get-parameter --name "$DB_URL_PARAM" --with-decryption 2>&1 | tee -a $LOGFILE
        # Don't exit - continue with other parameters
      else
        echo "Successfully retrieved DATABASE_URL from SSM"
      fi

      # Get API_ACCESS_TOKEN from SSM Parameter Store
      API_TOKEN_PARAM="/$APP_PREFIX/$ENV_TYPE/api-access-token"
      echo "Retrieving API_ACCESS_TOKEN from SSM parameter: $API_TOKEN_PARAM"

      API_ACCESS_TOKEN=$(aws ssm get-parameter --name "$API_TOKEN_PARAM" --with-decryption --query "Parameter.Value" --output text 2>>$LOGFILE)
      SSM_STATUS=$?

      if [ $SSM_STATUS -ne 0 ] || [ -z "$API_ACCESS_TOKEN" ]; then
        echo "WARNING: Failed to retrieve API_ACCESS_TOKEN from SSM parameter store ($SSM_STATUS)"
        echo "Using fallback token instead"
        API_ACCESS_TOKEN="api-token-fallback-$(date +%s)" # Fallback with timestamp
      else
        echo "Successfully retrieved API_ACCESS_TOKEN from SSM"
      fi

      # Environment files
      EB_APP_STAGING_DIR=/opt/elasticbeanstalk/deployment/app/staging
      EB_ENV_FILE=/opt/elasticbeanstalk/deployment/env

      # Create a new .env file for the application
      APP_ENV_FILE=$EB_APP_STAGING_DIR/.env
      echo "Creating application .env file at $APP_ENV_FILE"

      cat > $APP_ENV_FILE <<EOL
      NODE_ENV=${NODE_ENV}
      PORT=${PORT}
      LOG_LEVEL=${LOG_LEVEL}
      DATABASE_URL=${DATABASE_URL}
      API_ACCESS_TOKEN=${API_ACCESS_TOKEN}
      EOL

      # Also set environment variables for the application deployment environment
      echo "Setting environment variables in $EB_ENV_FILE"

      # Add or update all environment variables
      grep -q "^NODE_ENV=" $EB_ENV_FILE && \
        sed -i "s|^NODE_ENV=.*|NODE_ENV=$NODE_ENV|" $EB_ENV_FILE || \
        echo "NODE_ENV=$NODE_ENV" >> $EB_ENV_FILE

      grep -q "^PORT=" $EB_ENV_FILE && \
        sed -i "s|^PORT=.*|PORT=$PORT|" $EB_ENV_FILE || \
        echo "PORT=$PORT" >> $EB_ENV_FILE

      grep -q "^LOG_LEVEL=" $EB_ENV_FILE && \
        sed -i "s|^LOG_LEVEL=.*|LOG_LEVEL=$LOG_LEVEL|" $EB_ENV_FILE || \
        echo "LOG_LEVEL=$LOG_LEVEL" >> $EB_ENV_FILE

      grep -q "^DATABASE_URL=" $EB_ENV_FILE && \
        sed -i "s|^DATABASE_URL=.*|DATABASE_URL=$DATABASE_URL|" $EB_ENV_FILE || \
        echo "DATABASE_URL=$DATABASE_URL" >> $EB_ENV_FILE

      grep -q "^API_ACCESS_TOKEN=" $EB_ENV_FILE && \
        sed -i "s|^API_ACCESS_TOKEN=.*|API_ACCESS_TOKEN=$API_ACCESS_TOKEN|" $EB_ENV_FILE || \
        echo "API_ACCESS_TOKEN=$API_ACCESS_TOKEN" >> $EB_ENV_FILE

      # Check if our environment variables were correctly set
      echo "Current environment variables in $EB_ENV_FILE:"
      grep -E "^(NODE_ENV|PORT|LOG_LEVEL|DATABASE_URL|API_ACCESS_TOKEN)=" $EB_ENV_FILE || echo "No matching variables found"

      echo "Environment variables set successfully at $(date)"
